{"version":3,"file":"recordings_plain.min.js","sources":["../src/recordings_plain.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JS for handling actions in the plain recordings table.\n *\n * @module      mod_bigbluebuttonbn/recordings_plain\n * @copyright   2025 Blindside Networks Inc\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as repository from './repository';\nimport { exception as displayException, saveCancelPromise } from 'core/notification';\nimport { getString } from 'core/str';\n\n/**\n * Extracts the recording ID from the action button's ID pattern.\n *\n * Example ID: `recording-publish-d6b2bf7998c4ebe9d2ccad0b09132a5d0b6b048d-1740088258056`\n *\n * @param {HTMLElement} element The clicked action button\n * @returns {string|null} The extracted recording ID or null\n */\nconst extractRecordingId = (element) => {\n    const actionButton = element.closest('a.action-icon'); // Always get the <a> element\n    if (!actionButton || !actionButton.id) {\n        logMessage(\"Missing ID on action button.\");\n        return null;\n    }\n\n    const idPattern = /^recording-[^-]+-([\\w\\d]+)-/; // Extracts recording ID from <a> ID\n    const match = actionButton.id.match(idPattern);\n\n    if (!match) {\n        logMessage(\"Failed to extract recording ID from button.\");\n        return null;\n    }\n\n    logMessage(\"Recording ID: \" + match[1]);\n    return match[1]; // Correct reference for extracted recording ID\n};\n\n/**\n * Extracts the action type dynamically from the `data-action` attribute.\n *\n * @param {HTMLElement} element The clicked action button\n * @returns {string|null} The action name (e.g., \"publish\", \"delete\") or null\n */\nconst extractActionType = (element) => {\n    return element.dataset.action || null;\n};\n\n/**\n * Handles an action (e.g., delete, publish, unpublish, lock, etc.) for a recording.\n *\n * @param {HTMLElement} element The clicked action button\n * @returns {Promise}\n */\nconst requestPlainAction = async(element) => {\n    const getDataFromAction = (element, dataType) => {\n        const dataElement = element.closest(`[data-${dataType}]`);\n        if (dataElement) {\n            return dataElement.dataset[dataType];\n        }\n\n        return null;\n    };\n\n    const elementData = element.dataset;\n    const payload = {\n        bigbluebuttonbnid: getDataFromAction(element, 'bbbid'),\n        recordingid: getDataFromAction(element, 'recordingid'),\n        additionaloptions: getDataFromAction(element, 'additionaloptions'),\n        action: elementData.action,\n    };\n    logMessage(payload);\n\n    // Slight change for import, for additional options.\n    if (!payload.additionaloptions) {\n        payload.additionaloptions = {};\n    }\n    if (elementData.action === 'import') {\n        const bbbsourceid = getDataFromAction(element, 'source-instance-id');\n        const bbbcourseid = getDataFromAction(element, 'source-course-id');\n        if (!payload.additionaloptions) {\n            payload.additionaloptions = {};\n        }\n        payload.additionaloptions.sourceid = bbbsourceid ? bbbsourceid : 0;\n        payload.additionaloptions.bbbcourseid = bbbcourseid ? bbbcourseid : 0;\n    }\n    // Now additional options should be a json string.\n    payload.additionaloptions = JSON.stringify(payload.additionaloptions);\n    if (element.dataset.requireConfirmation === \"1\") {\n        // Create the confirmation dialogue.\n        try {\n            await saveCancelPromise(\n                getString('confirm'),\n                await getRecordingConfirmationMessage(payload),\n                getString('ok', 'moodle'),\n            );\n        } catch {\n            // User cancelled the dialogue.\n            return;\n        }\n    }\n\n    return repository.updateRecording(payload)\n        .then(() => refreshPlainTable())\n        .catch(displayException);\n};\n\n\nconst requestPlainActionRefactored = async (element) => {\n    const action = extractActionType(element);\n    const recordingId = extractRecordingId(element);\n\n    if (!action || !recordingId) {\n        logMessage(\"Missing action type or recording ID.\");\n        return;\n    }\n\n    const payload = {\n        recordingid: recordingId,\n        action: action,\n    };\n\n    if (element.dataset.requireConfirmation === \"1\") {\n        try {\n            await saveCancelPromise(\n                getString('confirm'),\n                await getRecordingConfirmationMessage(payload),\n                getString('ok', 'moodle'),\n            );\n        } catch {\n            return; // User cancelled the action.\n        }\n    }\n\n    return repository.updateRecording(payload)\n        .then(() => refreshPlainTable())\n        .catch(displayException);\n};\n\n/**\n * Generates a confirmation message for recording actions.\n *\n * @param {Object} data The recording action data\n * @returns {Promise<string>}\n */\nconst getRecordingConfirmationMessage = async (data) => {\n\n    logMessage(data);\n\n    const playbackElement = document.querySelector(`#playbacks-${data.recordingid}`);\n\n    if (!playbackElement) {\n        // Fallback if the element is missing\n        return getString(`view_recording_${data.action}_confirmation`, 'bigbluebuttonbn');\n    }\n\n    // Determine recording type (imported or regular)\n    const recordingType = await getString(\n        playbackElement.dataset.imported === 'true' ? 'view_recording_link' : 'view_recording',\n        'bigbluebuttonbn'\n    );\n\n    // Get base confirmation message\n    const confirmation = await getString(\n        `view_recording_${data.action}_confirmation`,\n        'bigbluebuttonbn',\n        recordingType\n    );\n\n    if (data.action === 'import') {\n        return confirmation; // No additional warnings needed\n    }\n\n    // Handle associated links\n    const associatedLinkCount = document.querySelector(`a#recording-${data.action}-${data.recordingid}`)?.dataset?.links;\n\n    if (!associatedLinkCount || associatedLinkCount === \"0\") {\n        return confirmation; // No warnings needed\n    }\n\n    // Fetch warning message based on link count\n    const confirmationWarning = await getString(\n        associatedLinkCount === \"1\"\n            ? `view_recording_${data.action}_confirmation_warning_p`\n            : `view_recording_${data.action}_confirmation_warning_s`,\n        'bigbluebuttonbn',\n        associatedLinkCount\n    );\n\n    return `${confirmationWarning}\\n\\n${confirmation}`;\n};\n\n/**\n * Refreshes the plain recordings table by reloading the page.\n */\nconst refreshPlainTable = () => {\n    window.location.reload(); // Refresh page to update the table\n};\n\n/**\n * Registers event listeners for recording actions in the plain HTML table.\n */\nconst registerPlainRecordingListeners = () => {\n    document.addEventListener('click', (e) => {\n        logMessage(\"DEBUG.\");\n        const actionButton = e.target.closest('.action-icon');\n        if (actionButton) {\n            e.preventDefault();\n            requestPlainAction(actionButton);\n        }\n    });\n};\n\n// Initialize event listeners when the script is loaded\nregisterPlainRecordingListeners();\n\nconst logMessage = (message) => {\n    if (typeof console !== \"undefined\" && typeof console.log === \"function\") {\n        /* eslint-disable no-console */\n        console.log(message);\n        /* eslint-enable no-console */\n    }\n};"],"names":["getRecordingConfirmationMessage","async","logMessage","data","playbackElement","document","querySelector","recordingid","action","recordingType","dataset","imported","confirmation","associatedLinkCount","_document$querySelect","_document$querySelect2","links","confirmationWarning","refreshPlainTable","window","location","reload","addEventListener","e","actionButton","target","closest","preventDefault","getDataFromAction","element","dataType","dataElement","elementData","payload","bigbluebuttonbnid","additionaloptions","bbbsourceid","bbbcourseid","sourceid","JSON","stringify","requireConfirmation","repository","updateRecording","then","catch","displayException","requestPlainAction","message","console","log"],"mappings":";;;;;;;wBAiKMA,gCAAkCC,MAAAA,wDAEpCC,WAAWC,YAELC,gBAAkBC,SAASC,mCAA4BH,KAAKI,kBAE7DH,uBAEM,2CAA4BD,KAAKK,wBAAuB,yBAI7DC,oBAAsB,kBACa,SAArCL,gBAAgBM,QAAQC,SAAsB,sBAAwB,iBACtE,mBAIEC,mBAAqB,2CACLT,KAAKK,wBACvB,kBACAC,kBAGgB,WAAhBN,KAAKK,cACEI,mBAILC,kDAAsBR,SAASC,oCAA6BH,KAAKK,mBAAUL,KAAKI,+EAA1DO,sBAA0EJ,iDAA1EK,uBAAmFC,UAE1GH,qBAA+C,MAAxBA,2BACjBD,mBAILK,0BAA4B,2CAENd,KAAKK,OADL,MAAxBK,yEAGA,kBACAA,qCAGMI,mCAA0BL,eAMlCM,kBAAoB,KACtBC,OAAOC,SAASC,UAOhBhB,SAASiB,iBAAiB,SAAUC,IAChCrB,WAAW,gBACLsB,aAAeD,EAAEE,OAAOC,QAAQ,gBAClCF,eACAD,EAAEI,iBAzJa1B,OAAAA,gBACjB2B,kBAAoB,CAACC,QAASC,kBAC1BC,YAAcF,QAAQH,wBAAiBI,sBACzCC,YACOA,YAAYrB,QAAQoB,UAGxB,MAGLE,YAAcH,QAAQnB,QACtBuB,QAAU,CACZC,kBAAmBN,kBAAkBC,QAAS,SAC9CtB,YAAaqB,kBAAkBC,QAAS,eACxCM,kBAAmBP,kBAAkBC,QAAS,qBAC9CrB,OAAQwB,YAAYxB,WAExBN,WAAW+B,SAGNA,QAAQE,oBACTF,QAAQE,kBAAoB,IAEL,WAAvBH,YAAYxB,OAAqB,OAC3B4B,YAAcR,kBAAkBC,QAAS,sBACzCQ,YAAcT,kBAAkBC,QAAS,oBAC1CI,QAAQE,oBACTF,QAAQE,kBAAoB,IAEhCF,QAAQE,kBAAkBG,SAAWF,aAA4B,EACjEH,QAAQE,kBAAkBE,YAAcA,aAA4B,KAGxEJ,QAAQE,kBAAoBI,KAAKC,UAAUP,QAAQE,mBACP,MAAxCN,QAAQnB,QAAQ+B,8BAGN,oCACF,kBAAU,iBACJzC,gCAAgCiC,UACtC,kBAAU,KAAM,WAEtB,aAMCS,WAAWC,gBAAgBV,SAC7BW,MAAK,IAAM1B,sBACX2B,MAAMC,0BAwGHC,CAAmBvB,wBAQzBtB,WAAc8C,UACO,oBAAZC,SAAkD,mBAAhBA,QAAQC,KAEjDD,QAAQC,IAAIF"}