define("mod_bigbluebuttonbn/recordings_plain",["./repository","core/notification","core/str"],(function(repository,_notification,_str){function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}repository=function(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj,cache&&cache.set(obj,newObj);return newObj}
/**
   * JS for handling actions in the plain recordings table.
   *
   * @module      mod_bigbluebuttonbn/recordings_plain
   * @copyright   2025 Blindside Networks Inc
   * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */(repository);const getRecordingConfirmationMessage=async data=>{var _document$querySelect,_document$querySelect2;logMessage(data);const playbackElement=document.querySelector("#playbacks-".concat(data.recordingid));if(!playbackElement)return(0,_str.getString)("view_recording_".concat(data.action,"_confirmation"),"bigbluebuttonbn");const recordingType=await(0,_str.getString)("true"===playbackElement.dataset.imported?"view_recording_link":"view_recording","bigbluebuttonbn"),confirmation=await(0,_str.getString)("view_recording_".concat(data.action,"_confirmation"),"bigbluebuttonbn",recordingType);if("import"===data.action)return confirmation;const associatedLinkCount=null===(_document$querySelect=document.querySelector("a#recording-".concat(data.action,"-").concat(data.recordingid)))||void 0===_document$querySelect||null===(_document$querySelect2=_document$querySelect.dataset)||void 0===_document$querySelect2?void 0:_document$querySelect2.links;if(!associatedLinkCount||"0"===associatedLinkCount)return confirmation;const confirmationWarning=await(0,_str.getString)("view_recording_".concat(data.action,"1"===associatedLinkCount?"_confirmation_warning_p":"_confirmation_warning_s"),"bigbluebuttonbn",associatedLinkCount);return"".concat(confirmationWarning,"\n\n").concat(confirmation)},refreshPlainTable=()=>{window.location.reload()};document.addEventListener("click",(e=>{logMessage("DEBUG.");const actionButton=e.target.closest(".action-icon");actionButton&&(e.preventDefault(),(async element=>{const getDataFromAction=(element,dataType)=>{const dataElement=element.closest("[data-".concat(dataType,"]"));return dataElement?dataElement.dataset[dataType]:null},elementData=element.dataset,payload={bigbluebuttonbnid:getDataFromAction(element,"bbbid"),recordingid:getDataFromAction(element,"recordingid"),additionaloptions:getDataFromAction(element,"additionaloptions"),action:elementData.action};if(logMessage(payload),payload.additionaloptions||(payload.additionaloptions={}),"import"===elementData.action){const bbbsourceid=getDataFromAction(element,"source-instance-id"),bbbcourseid=getDataFromAction(element,"source-course-id");payload.additionaloptions||(payload.additionaloptions={}),payload.additionaloptions.sourceid=bbbsourceid||0,payload.additionaloptions.bbbcourseid=bbbcourseid||0}if(payload.additionaloptions=JSON.stringify(payload.additionaloptions),"1"===element.dataset.requireConfirmation)try{await(0,_notification.saveCancelPromise)((0,_str.getString)("confirm"),await getRecordingConfirmationMessage(payload),(0,_str.getString)("ok","moodle"))}catch{return}repository.updateRecording(payload).then((()=>refreshPlainTable())).catch(_notification.exception)})(actionButton))}));const logMessage=message=>{"undefined"!=typeof console&&"function"==typeof console.log&&console.log(message)}}));

//# sourceMappingURL=recordings_plain.min.js.map